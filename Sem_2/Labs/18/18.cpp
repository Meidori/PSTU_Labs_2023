#include <iostream>
#include <string>
#include <ctime>
#include "hashtable.h"


std::string names[40] = {"Агеева Мирослава Егоровна", "Антонов Александр Тимофеевич", "Антонов Вячеслав Савельевич", "Борисова Нина Егоровна", 
"Булатова Варвара Данииловна", "Власова Варвара Максимовна", "Гусева Майя Степановна", "Гусева Елизавета Александровна", "Гусева Вероника Максимовна",
"Денисов Иван Максимович", "Дмитриева Ярослава Владиславовна", "Егорова Анастасия Савельевна", "Зайцев Максим Леонидович", "Зайцев Ярослав Максимович", 
"Иванов Илья Матвеевич", "Иванова Ксения Егоровна", "Исаков Михаил Никитич", "Карпов Иван Ярославович", "Князев Александр Сергеевич", "Козлов Вячеслав Артёмович",
"Кононов Владимир Маркович", "Корнев Денис Иванович", "Корнилов Матвей Александрович", "Кочетов Мирослав Александрович", "Лебедева София Тимофеевна", 
"Леонов Вячеслав Артёмович", "Лукина Вера Никитична", "Мельников Александр Родионович", "Морозова Виктория Марковна", "Нестеров Павел Михайлович", 
"Нефедов Николай Фёдорович", "Павлов Михаил Даниилович", "Полякова София Владиславовна", "Полякова Евгения Алексеевна", "Сергеева Дарина Кирилловна", 
"Фокин Дмитрий Леонидович", "Черкасова София Всеволодовна", "Чернышева Варвара Георгиевна", "Чистякова Алиса Михайловна", "Широкова София Максимовна"};

std::string adresses[40] = {"ул. Ленина, д. 40, г. Майкоп, Республика Адыгея", "пр-т Калинина, д. 8, г. Барнаул, Алтайский край", 
"ул. Улагашева, д. 13, г. Горно-Алтайск, Республика Алтай", "ул. Амурская, д. 150, г. Благовещенск, Амурская обл.", 
"ул. К. Либкнехта, д. 2, г. Архангельск, Архангельская обл.", "ул. Шаумяна, д. 47, г. Астрахань, Астраханская обл.", 
"ул. Пушкина, д. 95, г. Уфа, Республика Башкортостан", "ул. Преображенская, д. 82, г. Белгород, Белгородская обл.", "ул. Дуки, д. 80, г. Брянск, Брянская обл.",
"ул. Ленина, д. 55, г. Улан-Удэ, Республика Бурятия", "ул. Большая Московская, д. 1, г. Владимир, Владимирская обл.", 
"ул. 7-я Гвардейская, д. 12, г. Волгоград, Волгоградская обл.", "ул. Пушкинская, д. 25, г. Вологда, Вологодская обл.", 
"ул. Плехановская, д. 53, г. Воронеж, Воронежская обл.", "пл. Ленина, д. 2, г. Махачкала, Республика Дагестан", 
"ул. Постышева, д. 3, г. Биробиджан, Еврейская автономная обл.", "ул. Лермонтова, д. 14, пом. 3, г. Чита, Забайкальский край", 
"ул. Жарова, д. 10, г. Иваново, Ивановская обл.", "ул. Победы, д. 3, корп. С, г. Назрань, Республика Ингушетия", "ул. Российская, д. 17, г. Иркутск, Иркутская обл.",
"ул. Тарчокова, д. 18, г. Нальчик, Кабардино-Балкарская Республика", "ул. Барнаульская, д. 4, г. Калининград, Калининградская обл.", 
"ул. Лермонтова, д. 4, г. Элиста, Республика Калмыкия", "пл. Старый Торг, д. 5, г. Калуга, Калужская обл.", 
"ул. Ленинградская, д. 90, г. Петропавловск-Камчатский, Камчатский край", "пр-т Ленина, д. 38, г. Черкесск, Карачаево-Черкесская Республика",
"наб. Варкауса, д. 1А, г. Петрозаводск, Республика Карелия", "ул. Ноградская, д. 5, г. Кемерово, Кемеровская обл.", 
"ул. Карла Либкнехта, д. 55, г. Киров, Кировская обл", "ул. Интернациональная, д. 160, корпус А, г. Сыктывкар, ГСП-2, Республика Коми", 
"ул. Калиновская, д. 38, г. Кострома, Костромская обл.", "ул. Коммунаров, д. 235, г. Краснодар, Краснодарский край", 
"пр-т Мира, д. 81д, г. Красноярск, Красноярский край", "ул. Гоголя, д. 56, г. Курган, Курганская область", "ул. Марата, д. 9, г. Курск, Курская обл.",
"ул. Смольного, д. 3, г. Санкт-Петербург", "пл. Плеханова, д. 1, г. Липецк, Липецкая обл.", "ул. Портовая, д. 8, г. Магадан, Магаданская обл.", 
"ул. Волкова, д. 164, г. Йошкар-Ола, Республика Марий Эл", "ул. Рубиновая, д. 17, г. Воткинск, Удмуртская республика"};


int main() {
    int amount_of_elements = 100;

    int selector;
    std::cout << "Выберите метод резрешения коллизии:\n1) метод открытой адрессации,\n2) метод цепочек." << std::endl;
    std::cin >> selector;


    switch (selector) {
        case 1: {
            hash_table hashmap_open_adressing;
            hashmap_open_adressing.init();
            elem_of_table data;

            for (int i = 0; i < amount_of_elements; i++) {
                data.name = names[std::rand() % 40];
                data.passport = 1000000000 + std::rand() % 9999999999;
                data.adress = adresses[std::rand() % 40];
                
                hashmap_open_adressing.add(&data);
            }

            hashmap_open_adressing.print_hash_table();

            std::cout << "Количество коллизий: " << hashmap_open_adressing.collision_counter << ".\n";
            std::cout << "Количество записей в таблице:" << hashmap_open_adressing.filled_part_counter << std::endl;
            break;
        }
            
        case 2: {
            hash_table hashmap_separate_chaining;
            hashmap_separate_chaining.init();
            elem_of_table data;
            
            for (int i = 0; i < amount_of_elements; i++) {
                data.name = names[std::rand() % 40];
                data.passport = 1000000000 + std::rand() % 9999999999;
                data.adress = adresses[std::rand() % 40];
                
                hashmap_separate_chaining.add(&data, 1);
            }

            

            hashmap_separate_chaining.print_hash_table(1);

            std::cout << "Количество коллизий: " << hashmap_separate_chaining.collision_counter << ".\n";
            std::cout << "Количество записей в таблице:" << hashmap_separate_chaining.filled_part_counter << std::endl;
            break;
        }
    
        default:
            break;
    }
}